plugins {
    id("base")
    id("com.github.node-gradle.node")
}

def PROPERTY_REGISTRY = "dukat.npm.registry"
def PROPERTY_PACKAGE = "dukat.npm.packageVersion"

def DISTRIB_PATH = "${project.buildDir}/distrib"
def TYPESCRIPT_VERSION = hasProperty("tsVersion") ? tsVersion : gradle.defaultTsVersion
def PACKAGE_VERSION = hasProperty(PROPERTY_PACKAGE) ? getProperty(PROPERTY_PACKAGE)
                                                        .replace("__DEFAULT__", gradle.defaultNpmPackageVersion)
                                                        .replace("__TIMESTAMP__", new Date().format("yyyyMMdd")) : gradle.defaultNpmPackageVersion

node {
    workDir = gradle.nodeWorkingDir

    version = gradle.nodeVersion
    npmVersion = gradle.npmVersion
    yarnVersion = gradle.yarnVersion

    nodeModulesDir = file(DISTRIB_PATH)
    download = true
}

configurations {
    cliBinary
    kotlinJsLibs
}

dependencies {
    cliBinary(project(":command-line")) {
        transitive = false
    }
    kotlinJsLibs("org.jetbrains.kotlin:kotlin-stdlib-js:${gradle.kotlinVersion}")
}

task prepareNpmPackage {
    doLast {
        copy {
            from "package.template.json"
            into DISTRIB_PATH
            filter { String line ->
                line.replaceAll("__TS_VERSION__", TYPESCRIPT_VERSION)
                    .replaceAll("__PROTOBUF_VERSION__", gradle.protobufImplementationVersion)
                    .replaceAll("__PACKAGE_VERSION__", PACKAGE_VERSION)
            }
            rename { String fileName -> fileName.replace(".template", "") }
        }

        copy {
            from "yarn.lock"
            into DISTRIB_PATH
        }
    }
}

yarn.dependsOn = [yarnSetup, prepareNpmPackage]

task downloadKotlinMetaData(type: Copy) {
    configurations.kotlinJsLibs.each {
        from zipTree(it.absolutePath).matching { include("**/*.meta.js") }
    }
    into "$DISTRIB_PATH/kotlin-stdlib-js"
}

task buildDistrib {
    dependsOn = [downloadKotlinMetaData, ":ts-converter:webpack", yarn, ":command-line:build"]

    doLast {
        copy {
            from "${rootProject.projectDir}/README.md"
            into DISTRIB_PATH
        }

        copy {
            from "${project(":ts-converter").buildDir}/package/node_modules/typescript/lib"
            include "*.d.ts"
            into "${DISTRIB_PATH}/d.ts.libs"
        }

        copy {
            from "${project(":ts-converter").buildDir}/bundle/converter.js"
            into "${DISTRIB_PATH}/lib"
        }

        copy {
            from "bin"
            into "${DISTRIB_PATH}/bin"
        }

        copy {
            from configurations.cliBinary
            into "${DISTRIB_PATH}/build/runtime"
        }
    }
}


task nodeEnv(type: NodeTask) {
    doFirst {
        mkdir project.buildDir
    }
    script = file("env.js")
    args = ["${project.buildDir}/env.json"]
}


task npmPack(type: NpmTask) {
    dependsOn = [":command-line:build", buildDistrib]
    args = ["pack"]
}

task npmrc() {
    doLast {
        def token = getProperty("kotlin.npmjs.auth.token")
        def registry = project.findProperty(PROPERTY_REGISTRY) ?: "registry.npmjs.org"
        def customConfig = """
//${registry}/:_authToken="${token}"
        """
        def configFile = "${DISTRIB_PATH}/.npmrc"
        file(configFile).text = customConfig;
    }
}



task npmPublish(type: NpmTask) {
    dependsOn = [npmrc, npmPack]

    def distribPath = "dukat-${PACKAGE_VERSION}.tgz"

    def registry = project.findProperty(PROPERTY_REGISTRY) ?: "registry.npmjs.org"
    def npmArgs = ["publish",  distribPath,  "--registry", "http://${registry}"]

    if (project.hasProperty("dukat.npm.tag")) {
        npmArgs += ["--tag", project.getProperty("dukat.npm.tag") as String]
    }

    println("publishing npm artifact:")
    println("npm " + npmArgs.join(" "))

    args = npmArgs
}